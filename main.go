package main

import (
	"configuration-store/api"
	api_routes "configuration-store/api/routes"
	"configuration-store/docs" // docs is generated by Swag CLI, you have to import it.
	web_routes "configuration-store/web/routes"
	"fmt"
	"github.com/foolin/echo-template"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mssql"
	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"github.com/paked/configure"
	"github.com/swaggo/echo-swagger"
)


var (
	conf = configure.New()
	port = conf.Int("port", 8080, "The port to listen for requests")
	connectionString = conf.String("connection-string", "sqlserver://sa:yourStrong(!)Password@192.168.137.7:1433?database=cenas", "Configuration store connection string")
)

func init() {
	conf.Use(configure.NewEnvironment())
	conf.Use(configure.NewFlag())
}

// @title Configuration store
// @version 1.0
// @description This is configuration store server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @BasePath /api/v1

func main() {

	docs.SwaggerInfo.Host = ""

	e := echo.New()

	e.Use(middleware.RequestID())
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CSRF())
	e.Use(middleware.Secure())

	templateConfig := echotemplate.TemplateConfig{
		Delims:			echotemplate.DefaultConfig.Delims,
		DisableCache:	echotemplate.DefaultConfig.DisableCache,
		Extension:		echotemplate.DefaultConfig.Extension,
		Funcs:			echotemplate.DefaultConfig.Funcs,
		Partials:		echotemplate.DefaultConfig.Partials,
		Master:			"web/layouts/master",
		Root:			"web/views",
	}
	e.Renderer = echotemplate.New(templateConfig)

	api_routes.Register(e, "/api/v1")
	web_routes.Register(e, "/")
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	conf.Parse()

	db, err := gorm.Open("mssql", *connectionString) //dereference pointer
	if err != nil {
		e.Logger.Fatal("failed to connect database")
	}
	defer db.Close()

	db.AutoMigrate(&api.Project{})

	e.Logger.Fatal(e.Start(fmt.Sprintf(":%d", *port))) //dereference pointer
}
